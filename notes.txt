FEATURES / COMMENT OUT WHATS COMPLETED

IMAGE UPLOAD
const multer = require('multer');
const { v4: uuid4 } = require('uuid');
const { path } = require('express/lib/application');

const storage = multer.diskStorage({
    destination: function( request, file, cb ) {
        cb(null, 'images');
    },
    filename: function( request, file, cb ) {
        cb(null, uuid4() + '-' + Date.now() + path.extname(file.originalname))
        uuid = generates random ID per upload
        '-' = literal hyphen
        Date.now = timestamp
        path.extname = where file was uploaded
    }
})

const fileFilter = ( request, file, cb ) => {
    const allowedFileTypes = ['image/jpeg', 'image/jpg', 'image/png'];
    if (allowedFileTypes.includes(file.mimetype)) {
        cb(null, true);
    } else {
        cb(null, false)
    }
}

const imageUpload = multer({ storage, fileFilter })


IMAGE CAROUSEL


PAYMENT


LOGIN REGISTRATION


REUSING COMPONENTS (?)
    are there multiple of the same component?


MAIN PAGE
    display all created profiles
        onScroll = more profiles load
        flex the profiles into boxes with minimal info
    .map profiles
        {
            profileList.map((profileItem, index) => {
                return(
                        <div key = { index }>
                            <img src = {  } alt="" height="" width=""/>
                        src="" passes in { profileItem.whateverImCallingTheImages }
                        </div>
                    )
                
            })
        }
    refer to okc
    https://www.youtube.com/watch?v=gnkrDse9QKc


TEXTBOXES
    X characters left in space
<select></select>
    able to select multiple if applicable


MESSAGING
    may require socket.io
swipe left / swipe right function


FILTER BUTTON
    only displays what you've "filtered"



formSubmitted = { formSubmitted } setFormSubmitted = { setFormSubmitted }

// uuid = generates random ID per upload
// '-' = literal hyphen
// Date.now = timestamp
// path.extname = where file was uploaded


OLD REGISTER CODE

register = ( request, response ) => {
    console.log(request.body)
    DatingProfile.find({ email: request.body.email })
    .then((validEmail) => {
    console.log("NOT A DUPLICATE EMAIL", validEmail)
        if (validEmail.length === 0) {
            DatingProfile.create(request.body)
            .then(newUser => {
                console.log("THIS IS A NEW USER", newUser)
                const userToken = jwt.sign({
                    id: user._id,
                    firstName: user.firstName
                jwt.io testing / verifying if cookie has been processed
                }, process.env.SECRET_KEY);
        
                response
                    .cookie("userToken", userToken, process.env.SECRET_KEY, {
                        httpOnly: true
                    })
                    .json({ message: "SUCCESS!!", newUser: newUser });
            })
            .catch((err) => {
                response.json({ message: 'ERRRRRRORRRRRRRRR wheres my web token!', error: err})
            })
        } else {
            response.json({ errors: { email: { message: "This email is already taken" }}})
        }
    })
    .catch((err) => {
        response.json({ message: 'ERRRRRRORRRRRRRRR missing the registration?', error: err})
    })
}

